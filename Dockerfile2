
# XXX to make image = docker build -t go-api-image .\
# to make image = docker build -t go-api-image-volume -f Dockerfile.volume .
# to view image after success = docker images
# to view container = docker ps -a
# to run app = docker run --rm -d -p 3000:3000 go-api-image
# XXX docker run --rm p 3000:3000 go-api-image (waiting..., no return to prompt)
# docker run -d -p 8080:8080 -v ~/logs/go-api-image:/app/logs go-api-image-volume
# to see in browser = http://localhost:3000

# mkdir -p ~/logs/go-docker
# tail -200f ~/logs/go-docker/app.log


# to delete images
# docker rmi -f $(docker images -a -q)
# to delete containers
# docker rm -vf $(docker ps -a -q)


#go env -> GOOS = "windows"
# in cmd admin
# set GOOS=linux
# set GOOS=windows

# regular way = 387 MB
# multi-state = 13.3 MB
# scratch = 7.6 MB
# Multistage build to make a temporary container to help the app build
# then copy assets to another container with least amt of components to run app
FROM golang:alpine as builder
RUN apk add git
RUN mkdir /build 
ADD . /build
WORKDIR /build 

# attach a volume to the container
ARG LOG_DIR=/app/logs
RUN mkdir -p ${LOG_DIR}
ENV LOG_FILE_LOCATION=${LOG_DIR}/app.log 

COPY go.mod go.sum ./
RUN  go mod download
COPY . .

#RUN CGO_ENABLED=0 GOOS=linux go get -a -installsuffix cgo -ldflags '-extldflags "-static"'  github.com/go-chi/chi
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o main .

# start over
FROM scratch


#RUN go build -o main .

# very very lightweight
#FROM alpine
#RUN adduser -S -D -H -h /app appuser
#USER appuser
# copy just executable w/ no container OS
COPY --from=builder /build/main /app/
WORKDIR /app
EXPOSE 3000

# declare volume to mount
VOLUME [${LOG_DIR}]

CMD ["./main"]
